# The keycodes on a PC are usually:
#
# Left Shift = 42
# Left Ctrl = 29
# Left Alt = 56
# Right Alt = 100
# Right Ctrl = 97
# Right Shift = 54
#
# Mute = 113
# Volume Down = 114
# Volume Up = 115
# Eject = 161
#
# The LED codes on a PC are usually:
#
# Num Lock = 0
# Caps Lock = 1
# Scroll Lock = 2


# Some simple examples
# 114:key::echo volume.down press
# 114:rep::echo volume.down repeat
# 114:rel::echo volume.down release
# 
# 56+114:::echo left.alt+volume.down press


# Use the `mute' key as a 'function' key
# 113:key:ungrabbed,grab:echo keyboard grab
# 113:rel:grabbed,ungrab:echo keyboard ungrab

# This allows the `a' key to be binded to a command
# To use: press mute, press a, release in any order
#113+30::grabbed:echo alpha

# Same thing with the `b' key
#113+48::grabbed:echo beta


# Act if any of the `a'/`b'/`c' keys match
#30,48,46::any:echo A/B/C

# Act if both the `alt' and `f' keys match - ignore the other keys
#56+33::all:echo alt+f+...

# A real world example...
# When the `eject' key is pressed, wait for one of the `e'/`m'/`u' keys:
#161::ungrabbed,grab,noexec,ignrel:
#161:rel:grabbed,noexec:

# The `e' key : eject
#161+18::grabbed:echo eject
#161+18:rel:grabbed,noexec,ungrab,rcvrel,allrel:

# The `m' key : mount
# 161+50::grabbed:echo mount
# 161+50:rel:grabbed,noexec,ungrab,rcvrel,allrel:

# The `u' key : umount
# 161+22::grabbed:echo umount
# 161+22:rel:grabbed,noexec,ungrab,rcvrel,allrel:

# Any other key escapes this mode
# 161::grabbed,all,noexec:
# 161:rel:grabbed,all,noexec,ungrab,rcvrel,allrel:


# Produce an `a' key press and release whenever
# the `left.ctrl'+`volume.up' keys are pressed
#29+115::key(30),rel(30),noexec:


# Pressing the `1' key switches on the first LED (usually the Num Lock LED)
#2::ledon(0),noexec:

# Pressing the `0' key switches it off
#11::ledoff(0),noexec:


# This entry is triggered by any key press or release
# that has not matched with one of the entries above
#:key,rel:not:echo '*'

# Wakeup
#143:key:

# Sleep
#142:key::sync;acpitool -s

# PowerDown
#116:key::hibernate -f

# MPC
29+164:key::MPD_HOST="127.0.0.1" sh -c "if mpc | grep -q '\[playing\]'; then mpc -q pause; else mpc -q play; fi" &>/dev/null
29+166:key::MPD_HOST="127.0.0.1" mpc -q stop &>/dev/null
29+165:key::MPD_HOST="127.0.0.1" mpc -q prev &>/dev/null
29+163:key::MPD_HOST="127.0.0.1" mpc -q next &>/dev/null
29+42+163:key::MPD_HOST="127.0.0.1" mpc -q seek +10% &>/dev/null
29+42+165:key::MPD_HOST="127.0.0.1" mpc -q seek -10% &>/dev/null
42+166:key::MPD_HOST="127.0.0.1" mpc -q repeat &>/dev/null
42+163:key::MPD_HOST="127.0.0.1" mpc -q random &>/dev/null
29+114:key::MPD_HOST="127.0.0.1" mpc -q volume -5 &>/dev/null
29+115:key::MPD_HOST="127.0.0.1" mpc -q volume +5 &>/dev/null
#82+97:key::MPD_HOST="127.0.0.1" mpc -q crossfade &>/dev/null
#83+97:key::MPD_HOST="127.0.0.1" mpc -q update &>/dev/null

# Sound volume
114:key::amixer -q sset Master,0 5%- &>/dev/null
115:key::amixer -q sset Master,0 5%+ &>/dev/null
113:key::amixer -q sset Master,0 toggle &>/dev/null
